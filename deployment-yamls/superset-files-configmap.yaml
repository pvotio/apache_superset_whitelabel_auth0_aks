apiVersion: v1
kind: Secret
metadata:
  name: superset-files
  namespace: apps-public
  labels:
    app.kubernetes.io/name: superset
    app.kubernetes.io/instance: superset
    app: superset
    release: "superset"
type: Opaque
stringData:
  superset_config.py: |

    from datetime import timedelta
    import os
    import string
    import random
    from flask_caching.backends.rediscache import RedisCache
    from flask_appbuilder.security.manager import AUTH_OAUTH
    from custom_sso_security_manager import CustomSsoSecurityManager

    print("Running superset_config.py")

    def env(key, default=None):
        return os.getenv(key, default)
    
    CUSTOM_SECURITY_MANAGER = CustomSsoSecurityManager
    ENABLE_PROXY_FIX = True

    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True
    AUTH_ROLES_SYNC_AT_LOGIN = True

    AUTH0_URL = os.environ.get("AUTH0_URL") 
    AUTH0_CLIENT_KEY = os.environ.get("AUTH0_CLIENT_KEY")
    AUTH0_CLIENT_SECRET = os.environ.get("AUTH0_CLIENT_SECRET")

    nonce = ''.join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k = 30))

    OAUTH_PROVIDERS = [
      {   'name':'auth0',
          'token_key':'access_token',
          'icon':'fa-circle-o',
          'remote_app': {
              'api_base_url': AUTH0_URL,
              'client_id': AUTH0_CLIENT_KEY,  
              'client_secret': AUTH0_CLIENT_SECRET, 
              'server_metadata_url': os.path.join(AUTH0_URL, '.well-known/openid-configuration'),
              'client_kwargs': {
                  'scope': 'openid profile email groups'
              },
            'nonce': nonce,
          }
      }
    ]

    AUTH_ROLES_MAPPING = {
        "superset_role_inside_de_limited": ["Role_Inside_DE_limited"],
        "superset_role_inside_de_limited_admin": ["Role_Inside_DE_limited_Admin"],
        "superset_role_inside_de_unlimited": ["Role_Inside_DE_unlimited"],
        "superset_role_inside_en_limited": ["Role_Inside_EN_limited"],
        "superset_role_inside_en_unlimited": ["Role_Inside_EN_unlimited"],
        "superset_role_wm_en_unlimited": ["Role_WM_EN_unlimited"],
        "superset_role_wm_pool_unlimited": ["Role_WM_POOL_unlimited"],
        # "superset_role_wm_reader": ["Role_WM_READER"],
        "superset_role_inside_admin": ["Admin"],
    }

    APP_NAME = "XXXXXXXXXXX"
    APP_ICON = "/static/assets/images/logo.svg"
    APP_ICON_WIDTH = 136

    LOGO_TOOLTIP = "XX"
    LOGO_TARGET_PATH = '/dashboard/list'
    FAVICONS = [{"href": "/static/assets/images/favicon.svg"}]

    FEATURE_FLAGS = {
        'ENABLE_TEMPLATE_PROCESSING': True,
        'DASHBOARD_RBAC': True,
        'HORIZONTAL_FILTER_BAR': True,
    }

    #LANGUAGES = {
    #    'en': {'flag': 'us', 'name': 'English'},
    #    'de': {'flag': 'de', 'name': 'Deutsch'},
    #    'fr': {'flag': 'fr', 'name': 'FranÃ§ais'},
    #}

    HTML_SANITIZATION = False

    TALISMAN_ENABLED = False

    PERMANENT_SESSION_LIFETIME = timedelta(minutes=45)

    # Redis Base URL
    REDIS_BASE_URL=f"{env('REDIS_PROTO')}://{env('REDIS_HOST')}:{env('REDIS_PORT')}"
    
    # Redis URL Params
    REDIS_URL_PARAMS = ""
    
    # Build Redis URLs
    CACHE_REDIS_URL = f"{REDIS_BASE_URL}/{env('REDIS_DB', 1)}{REDIS_URL_PARAMS}"
    CELERY_REDIS_URL = f"{REDIS_BASE_URL}/{env('REDIS_CELERY_DB', 0)}{REDIS_URL_PARAMS}"
    
    MAPBOX_API_KEY = env('MAPBOX_API_KEY', '')
    CACHE_CONFIG = {
          'CACHE_TYPE': 'RedisCache',
          'CACHE_DEFAULT_TIMEOUT': 300,
          'CACHE_KEY_PREFIX': 'superset_',
          'CACHE_REDIS_URL': CACHE_REDIS_URL,
    }
    DATA_CACHE_CONFIG = CACHE_CONFIG
    
    SQLALCHEMY_DATABASE_URI = f"postgresql+psycopg2://{env('DB_USER')}:{env('DB_PASS')}@{env('DB_HOST')}:{env('DB_PORT')}/{env('DB_NAME')}"
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    
    class CeleryConfig:
      imports  = ("superset.sql_lab", )
      broker_url = CELERY_REDIS_URL
      result_backend = CELERY_REDIS_URL
    
    CELERY_CONFIG = CeleryConfig
    RESULTS_BACKEND = RedisCache(
          host=env('REDIS_HOST'),
          port=env('REDIS_PORT'),
          key_prefix='superset_results',
    )
  superset_init.sh: |
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    
    echo "Creating admin user..."
    superset fab create-admin \
                    --username admin \
                    --firstname Superset \
                    --lastname Admin \
                    --email admin@picardangst.com \
                    --password ${SS_ADMIN_PW} \
                    || true
    
    if [ -f "/app/configs/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p /app/configs/import_datasources.yaml
    fi
  superset_bootstrap.sh: |
    #!/bin/bash
    if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid 0" > ~/bootstrap; fi

    # uv pip install \
    # .[pymssql] \
    # .[pyodbc] \
    # .[authlib] \
    # .[azure-storage-blob] \
    # .[flask_oauthlib]

    export DB_PASS=$(cat /var/run/secrets/keyvault/pgsql-password)
    export SUPERSET_SECRET_KEY=$(cat /var/run/secrets/keyvault/secret-key)
    export REPORTING_SERVICE_TOKEN=$(cat /var/run/secrets/keyvault/reporting-service-token)
    export AUTH0_CLIENT_KEY=$(cat /var/run/secrets/keyvault/auth-client)
    export AUTH0_CLIENT_SECRET=$(cat /var/run/secrets/keyvault/auth-secret)
    export AUTH0_API_CLIENT_KEY=$(cat /var/run/secrets/keyvault/auth-api-client)
    export AUTH0_API_CLIENT_SECRET=$(cat /var/run/secrets/keyvault/auth-api-secret)
    export SS_ADMIN_PW=$(cat /var/run/secrets/keyvault/admin-secret)
    export SECRET_KEY=$SUPERSET_SECRET_KEY

    env | sort

    #ls -l /usr/bin/*.sh
    #chmod +x /usr/bin/run-server.sh

    #export PATHONPATH=/app/.venv/lib/python3.11/site-packages:/usr/lib/python3.11/site-packages:$PYTHONPATH
    #env | sort

    #python -m site

  custom_auth_oauth_view.py: |
    import os
    import re
    import jwt
    import logging
    from urllib.parse import urlparse

    from authlib.integrations.base_client.errors import MismatchingStateError

    from flask_login import login_user, logout_user
    from flask_appbuilder._compat import as_unicode
    from flask_appbuilder.security.views import expose
    from flask import flash, g, redirect, request, url_for
    from flask_appbuilder.security.views import AuthOAuthView


    logger = logging.getLogger('auth0_login')


    class CustomAuthOauthView(AuthOAuthView):

        login_template = "appbuilder/general/security/login_oauth_customized.html"
        logout_template = "appbuilder/general/security/logout_oauth_customized.html"

        @expose("/logout/")
        def logout(self):
            AUTH0_URL = os.environ.get("AUTH0_URL")
            CLIENT_ID = os.environ.get("AUTH0_CLIENT_KEY")
            logout_user()
            logout_url = f"{AUTH0_URL}/v2/logout?client_id={CLIENT_ID}" 
            return redirect(logout_url)
            # return self.render_template(
            #         self.logout_template,
            #         appbuilder=self.appbuilder,
            #     )
        
        @expose("/login/")
        @expose("/login/<provider>")
        @expose("/login/<provider>/<register>")
        def login(self, provider=None):
            logger.debug("Provider: {0}".format(provider))
            if g.user is not None and g.user.is_authenticated:
                logger.debug("Already authenticated {0}".format(g.user))
                return redirect(self.appbuilder.get_url_for_index)

            if provider is None:
                provider = 'auth0'
                # return redirect(url_for('CustomAuthOauthView.login', provider='auth0') + '?next=')
                # return self.render_template(
                #     self.login_template,
                #     providers=self.appbuilder.sm.oauth_providers,
                #     title=self.title,
                #     appbuilder=self.appbuilder,
                # )

            logger.debug("Going to call authorize for: {0}".format(provider))
            state = jwt.encode(
                request.args.to_dict(flat=False),
                self.appbuilder.app.config["SECRET_KEY"],
                algorithm="HS256",
            )
            try:
                if provider == "twitter":
                    return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(
                        redirect_uri=url_for(
                            ".oauth_authorized",
                            provider=provider,
                            _external=True,
                            state=state,
                        )
                    )
                else:
                    return self.appbuilder.sm.oauth_remotes[provider].authorize_redirect(
                        redirect_uri=url_for(
                            ".oauth_authorized", provider=provider, _external=True
                        ),
                        state=state.decode("ascii") if isinstance(state, bytes) else state,
                    )
            except Exception as e:
                logger.error("Error on OAuth authorize: {0}".format(e))
                flash(as_unicode(self.invalid_login_message), "warning")
                return redirect(self.appbuilder.get_url_for_index)
            
        @expose("/oauth-authorized/<provider>")
        def oauth_authorized(self, provider: str):
            logger.debug("Authorized init")

            if provider not in self.appbuilder.sm.oauth_remotes:
                flash(u"Provider not supported.", "warning")
                logger.warning("OAuth authorized got an unknown provider %s", provider)
                return redirect(self.appbuilder.get_url_for_login)

            try:
                resp = self.appbuilder.sm.oauth_remotes[provider].authorize_access_token()
            except MismatchingStateError:
                logger.debug("2008 MismatchingStateError {0}, redirecting to index.".format(g.user))
                return redirect(self.appbuilder.get_url_for_index)

            if resp is None:
                flash(u"You denied the request to sign in.", "warning")
                return redirect(self.appbuilder.get_url_for_login)
            logger.debug("OAUTH Authorized resp: {0}".format(resp))
            # Retrieves specific user info from the provider
            try:
                self.appbuilder.sm.set_oauth_session(provider, resp)
                userinfo = self.appbuilder.sm.oauth_user_info(provider, resp)
            except Exception as e:
                logger.error("Error returning OAuth user info: {0}".format(e))
                user = None
            else:
                logger.debug("User info retrieved from {0}: {1}".format(provider, userinfo))
                # User email is not whitelisted
                if provider in self.appbuilder.sm.oauth_whitelists:
                    whitelist = self.appbuilder.sm.oauth_whitelists[provider]
                    allow = False
                    for email in whitelist:
                        if "email" in userinfo and re.search(email, userinfo["email"]):
                            allow = True
                            break
                    if not allow:
                        flash(u"You are not authorized.", "warning")
                        return redirect(self.appbuilder.get_url_for_login)
                else:
                    logger.debug("No whitelist for OAuth provider")
                user = self.appbuilder.sm.auth_user_oauth(userinfo)

            if user is None:
                flash(as_unicode(self.invalid_login_message), "warning")
                return redirect(self.appbuilder.get_url_for_login)
            else:
                login_user(user)
                try:
                    state = jwt.decode(
                        request.args["state"],
                        self.appbuilder.app.config["SECRET_KEY"],
                        algorithms=["HS256"],
                    )
                except jwt.InvalidTokenError:
                    raise Exception("State signature is not valid!")

                next_url = self.appbuilder.get_url_for_index
                # Check if there is a next url on state
                if "next" in state and len(state["next"]) > 0:
                    parsed_uri = urlparse(state["next"][0])
                    if parsed_uri.netloc != request.host:
                        logger.warning("Got an invalid next URL: %s", parsed_uri.netloc)
                    else:
                        next_url = state["next"][0]

                next_url = '/dashboard/list'
                return redirect(next_url)
  custom_sso_security_manager.py: |
    import os
    import requests
    import time
    from superset.security import SupersetSecurityManager
    import logging

    from custom_auth_oauth_view import CustomAuthOauthView


    logger = logging.getLogger('auth0_login')


    AUTH0_URL = os.environ.get("AUTH0_API_URL")
    AUTH0_API_CLIENT_ID = os.environ.get("AUTH0_API_CLIENT_KEY")
    AUTH0_API_CLIENT_SECRET = os.environ.get("AUTH0_API_CLIENT_SECRET")


    def robust_request(*args, **kwargs):
        MAX_RETRIES = 3
        BACKOFF_FACTOR = 2
        retry = 0
        while retry < MAX_RETRIES:
            try:
                response = requests.request(*args, **kwargs)
                response.raise_for_status()
                return response
            
            except requests.exceptions.RequestException as e:
                retry += 1
                if retry == MAX_RETRIES:
                    raise e
                else:
                    sleep_time = BACKOFF_FACTOR ** retry
                    time.sleep(sleep_time)


    def get_auth0_token(domain, client_id, client_secret):
        headers = { 'content-type': "application/json" }

        payload = {
            'client_id': client_id,
            'client_secret': client_secret,
            'audience': domain + '/api/v2/',
            'grant_type': 'client_credentials'
        }

        response = robust_request('POST', domain + '/oauth/token', headers=headers, json=payload) 
        return response.json()['access_token']


    def get_user_roles(domain, token, user_id):
        url = f"{domain}/api/v2/users/{user_id}/roles"
        headers = {"Authorization": f"Bearer {token}"}
        response = robust_request('get', url, headers=headers)
        response.raise_for_status()
        roles = [role["name"] for role in response.json()]
        return roles


    class CustomSsoSecurityManager(SupersetSecurityManager):

        authoauthview = CustomAuthOauthView

        def __init__(self, appbuilder):
            super(CustomSsoSecurityManager, self).__init__(appbuilder)

        def oauth_user_info(self, provider, response=None):
            if provider == 'auth0':
                oauth_resp = self.appbuilder.sm.oauth_remotes[provider]
                res = oauth_resp.get('userinfo')

                if res.raw.status != 200:
                    logger.error('Failed to obtain user info: %s', res.json())
                    return
                
                me = res.json()
                logger.info(me)

                token = get_auth0_token(AUTH0_URL, AUTH0_API_CLIENT_ID, AUTH0_API_CLIENT_SECRET)
                roles = get_user_roles(AUTH0_URL, token, me['sub'])

                return {
                    'username' : me['email'],
                    'name' : me['name'],
                    'email' : me['email'],
                    'role_keys': roles if isinstance(roles, list) else []
                }
